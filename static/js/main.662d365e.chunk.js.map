{"version":3,"sources":["data/client.ts","data/schema.graphqls","data/write.ts","date.ts","states/curr-id.ts","timer.ts","__generated__/helpers.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["isServer","global","localStorage","client","cache","InMemoryCache","dataIdFromObject","o","__typename","defaultDataIdFromObject","getItem","restore","__Notes__","items","ROOT_QUERY","notes","__ref","restoreCache","persistCacheSync","storage","LocalStorageWrapper","window","debug","trigger","debounce","ApolloClient","typeDefs","createApolloClient","NOTE_QUERY","gql","NOTES_QUERY","writeNote","input","id","hash","md5","String","Date","now","slice","generateId","note","title","text","updated_at","writeQuery","query","variables","data","readQuery","lastId","foundIndex","findIndex","e","mutableItems","Array","from","splice","appendTo","tailNotes","appendNoteIfNecessary","writeNoteDebounced","TimeAgo","addDefaultLocale","en","timeAgo","formatAgo","dateObj","format","parseDateSafe","dateStr","currIdVar","makeVar","useCurrId","useReactiveVar","eventName","globalTimer","EventEmitter","setInterval","emit","defaultOptions","AllNotesDocument","useAllNotesQuery","baseOptions","options","Apollo","NoteDocument","useNoteQuery","Toolbar","currId","canCreate","Boolean","className","style","visibility","onClick","preventDefault","INITIAL_TITLE","LastSavedIndicator","useMemo","useState","d","setD","handleTick","useCallback","useEffect","handler","on","off","unsubscribeTick","Editor","titleRef","useRef","textRef","textValue","current","value","select","writeNoteBuffered","ref","type","defaultValue","onChange","minRows","maxRows","maxLength","undefined","length","Notes","ReactTooltip","rebuild","map","n","effect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.662d365e.chunk.js","sourcesContent":["import {\n  ApolloCache,\n  ApolloClient,\n  defaultDataIdFromObject,\n  InMemoryCache,\n  NormalizedCacheObject,\n} from '@apollo/client'\nimport { LocalStorageWrapper, persistCacheSync } from 'apollo3-cache-persist'\nimport typeDefs from './schema.graphqls'\n\nconst isProd = process.env.NODE_ENV === 'production'\nconst isServer = !global.localStorage\n\nexport type TClient = ApolloClient<NormalizedCacheObject>\n\nexport function restoreCache(cache: ApolloCache<any>) {\n  cache.restore({\n    __Notes__: {\n      __typename: 'Notes',\n      items: [],\n    },\n    ROOT_QUERY: {\n      __typename: 'Query',\n      notes: {\n        __ref: '__Notes__',\n      },\n    },\n  })\n}\n\nexport function createApolloClient() {\n  const cache = new InMemoryCache({\n    dataIdFromObject(o) {\n      switch (o.__typename) {\n        case 'Notes':\n          return '__Notes__'\n      }\n      return defaultDataIdFromObject(o)\n    },\n  })\n\n  if (!isServer) {\n    if (!localStorage.getItem('apollo-cache-persist')) restoreCache(cache)\n\n    persistCacheSync({\n      cache,\n      storage: new LocalStorageWrapper(window.localStorage),\n      debug: !isProd,\n      trigger: 'write',\n      debounce: 1000,\n    })\n  }\n\n  return new ApolloClient({\n    cache,\n    typeDefs,\n  })\n}\n\nexport const client = createApolloClient()\n","export default __webpack_public_path__ + \"static/media/schema.55a72a24.graphqls\";","import { gql } from '@apollo/client'\nimport { debounce } from 'lodash'\nimport md5 from 'md5'\nimport { Note, Notes, WriteNoteInput } from '../__generated__/helpers'\nimport { client } from './client'\n\nconst { cache } = client\n\nconst NOTE_QUERY = gql`\n  query Notes($id: String!) {\n    note(id: $id) {\n      __typename\n      id\n      text\n      title\n      updated_at\n    }\n  }\n`\n\nconst NOTES_QUERY = gql`\n  query Notes {\n    notes {\n      items {\n        __typename\n        id\n      }\n    }\n  }\n`\n\nfunction generateId() {\n  const hash = md5(String(Date.now())).slice(0, 6)\n  return `note:${hash}`\n}\n\nfunction appendNoteIfNecessary(note: Note): void {\n  const {\n    notes: { items },\n  } = cache.readQuery({\n    query: NOTES_QUERY,\n  }) as { notes: Notes }\n\n  const lastId = items[0]?.id\n  if (note.id === lastId) return\n\n  const foundIndex = items.findIndex((e) => note.id === e.id)\n  if (foundIndex >= 0) {\n    // items returned by readQuery is immutable\n    const mutableItems = Array.from(items)\n    mutableItems.splice(foundIndex, 1)\n\n    appendTo(mutableItems)\n  } else {\n    appendTo(items)\n  }\n\n  function appendTo(tailNotes: Note[]) {\n    cache.writeQuery({\n      query: NOTES_QUERY,\n      data: {\n        notes: {\n          __typename: 'Notes',\n          items: [note, ...tailNotes],\n        } as Notes,\n      },\n    })\n  }\n}\n\nexport function writeNote(input: WriteNoteInput): Note {\n  const id = input.id || generateId()\n\n  const note: Note = {\n    ...input,\n    id,\n    title: input.title || '',\n    text: input.text || '',\n    updated_at: String(new Date()),\n    __typename: 'Note',\n  }\n\n  cache.writeQuery({\n    query: NOTE_QUERY,\n    variables: {\n      id: id,\n    },\n    data: { note },\n  })\n\n  appendNoteIfNecessary(note)\n\n  return note\n}\n\nexport const writeNoteDebounced = debounce(writeNote, 100)\n","import TimeAgo from 'javascript-time-ago'\nimport en from 'javascript-time-ago/locale/en.json'\n\nTimeAgo.addDefaultLocale(en)\nconst timeAgo = new TimeAgo('en-US')\n\nexport const formatAgo = (dateObj: Date) => timeAgo.format(dateObj)\n\nexport function parseDateSafe(dateStr: string | null | undefined): null | Date {\n  return dateStr ? new Date(dateStr) : null\n}\n","import { makeVar, useReactiveVar } from '@apollo/client'\n\nexport const currIdVar = makeVar<string | null>(null)\n\nexport function useCurrId() {\n  return useReactiveVar(currIdVar)\n}\n","import EventEmitter from 'eventemitter3'\n\nconst timeout = 10 * 1000\nconst eventName = 'tick'\nconst globalTimer = new EventEmitter()\n\nsetInterval(() => {\n  globalTimer.emit(eventName)\n}, timeout)\n\nexport function subscribeTick(handler: () => void) {\n  globalTimer.on(eventName, handler)\n}\n\nexport function unsubscribeTick(handler: () => void) {\n  globalTimer.off(eventName, handler)\n}\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Note = {\n  __typename?: 'Note';\n  id: Scalars['ID'];\n  text: Scalars['String'];\n  title: Scalars['String'];\n  updated_at: Scalars['String'];\n};\n\nexport type Notes = {\n  __typename?: 'Notes';\n  items: Array<Note>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  lastNote?: Maybe<Note>;\n  note?: Maybe<Note>;\n  notes?: Maybe<Notes>;\n};\n\n\nexport type QueryNoteArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\nexport type WriteNoteInput = {\n  id?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type AllNotesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllNotesQuery = { __typename?: 'Query', notes?: { __typename?: 'Notes', items: Array<{ __typename?: 'Note', id: string, text: string, title: string, updated_at: string }> } | null | undefined };\n\nexport type NoteQueryVariables = Exact<{\n  id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type NoteQuery = { __typename?: 'Query', note?: { __typename?: 'Note', id: string, text: string, title: string, updated_at: string } | null | undefined };\n\n\nexport const AllNotesDocument = gql`\n    query AllNotes {\n  notes {\n    items {\n      id\n      text\n      title\n      updated_at\n    }\n  }\n}\n    `;\n\n/**\n * __useAllNotesQuery__\n *\n * To run a query within a React component, call `useAllNotesQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllNotesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllNotesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllNotesQuery(baseOptions?: Apollo.QueryHookOptions<AllNotesQuery, AllNotesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllNotesQuery, AllNotesQueryVariables>(AllNotesDocument, options);\n      }\nexport function useAllNotesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllNotesQuery, AllNotesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllNotesQuery, AllNotesQueryVariables>(AllNotesDocument, options);\n        }\nexport type AllNotesQueryHookResult = ReturnType<typeof useAllNotesQuery>;\nexport type AllNotesLazyQueryHookResult = ReturnType<typeof useAllNotesLazyQuery>;\nexport type AllNotesQueryResult = Apollo.QueryResult<AllNotesQuery, AllNotesQueryVariables>;\nexport const NoteDocument = gql`\n    query Note($id: String) {\n  note(id: $id) {\n    id\n    text\n    title\n    updated_at\n  }\n}\n    `;\n\n/**\n * __useNoteQuery__\n *\n * To run a query within a React component, call `useNoteQuery` and pass it any options that fit your needs.\n * When your component renders, `useNoteQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNoteQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useNoteQuery(baseOptions?: Apollo.QueryHookOptions<NoteQuery, NoteQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<NoteQuery, NoteQueryVariables>(NoteDocument, options);\n      }\nexport function useNoteLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<NoteQuery, NoteQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<NoteQuery, NoteQueryVariables>(NoteDocument, options);\n        }\nexport type NoteQueryHookResult = ReturnType<typeof useNoteQuery>;\nexport type NoteLazyQueryHookResult = ReturnType<typeof useNoteLazyQuery>;\nexport type NoteQueryResult = Apollo.QueryResult<NoteQuery, NoteQueryVariables>;","import { gql } from '@apollo/client'\nimport React, {\n  FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport TextArea from 'react-textarea-autosize'\nimport ReactTooltip from 'react-tooltip'\nimport { writeNote, writeNoteDebounced } from './data/write'\nimport { formatAgo, parseDateSafe } from './date'\nimport { currIdVar, useCurrId } from './states/curr-id'\nimport { subscribeTick, unsubscribeTick } from './timer'\nimport { Note, useAllNotesQuery, useNoteQuery } from './__generated__/helpers'\n\ngql`\n  query AllNotes {\n    notes {\n      items {\n        id\n        text\n        title\n        updated_at\n      }\n    }\n  }\n`\n\ngql`\n  query Note($id: String) {\n    note(id: $id) {\n      id\n      text\n      title\n      updated_at\n    }\n  }\n`\n\nconst Toolbar: FC = () => {\n  const currId = useCurrId()\n  const note = useNoteQuery({ variables: { id: currId } })?.data?.note\n  const canCreate = Boolean(currId && note?.title)\n  return (\n    <div className=\"xtoolbar\">\n      <div className=\"font-bold mr\">🖋 My Note</div>\n      <span className=\"spacer\" />\n      <button\n        data-tip={`Save \"${note?.title}\" and create a new note`}\n        className=\"py-1.5 px-4 rounded bg-pink-500 text-white\"\n        style={{ visibility: canCreate ? 'visible' : 'hidden' }}\n        onClick={(e) => {\n          e.preventDefault()\n          // const { id } = createNewNote();\n          currIdVar(null)\n        }}\n      >\n        New note\n      </button>\n      <div className=\"rounded-full bg-white w-8 h-8\" />\n    </div>\n  )\n}\n\nconst INITIAL_TITLE = 'Untitled'\n\nconst LastSavedIndicator: FC<{\n  dateStr: string | null | undefined\n}> = ({ dateStr }) => {\n  // Prevent to parse date string everytime to render\n  const dateObj = useMemo(() => parseDateSafe(dateStr), [dateStr])\n\n  // Hold date to update later\n  const [d, setD] = useState(dateObj)\n\n  const handleTick = useCallback(() => {\n    dateStr && setD(parseDateSafe(dateStr))\n  }, [dateStr])\n\n  useEffect(() => {\n    subscribeTick(handleTick)\n    return () => {\n      unsubscribeTick(handleTick)\n    }\n  }, [handleTick])\n\n  return (\n    <span data-tip={dateStr} data-place=\"bottom\">\n      {d && `${formatAgo(d)}`}\n    </span>\n  )\n}\n\nconst Editor: FC = function () {\n  const currId = useCurrId()\n  const note = useNoteQuery({ variables: { id: currId } })?.data?.note\n  const titleRef = useRef<HTMLInputElement | null>(null)\n  const textRef = useRef<HTMLTextAreaElement | null>(null)\n  const textValue = textRef.current?.value\n\n  useEffect(() => {\n    if (note) {\n      titleRef.current!.value = note.title\n      textRef.current!.value = note.text\n    } else {\n      titleRef.current!.value = INITIAL_TITLE\n      textRef.current!.value = ''\n      titleRef.current?.select()\n    }\n  }, [note, note?.id])\n\n  const writeNoteBuffered = useCallback(() => {\n    const input = {\n      title: titleRef.current!.value,\n      text: textRef.current!.value,\n    }\n    if (!currId) {\n      const { id } = writeNote(input)\n      currIdVar(id)\n    } else {\n      writeNoteDebounced({ id: currId, ...input })\n    }\n  }, [currId])\n\n  return (\n    <div className=\"curr my-8 mx-8 flex flex-col\">\n      <div className=\"curr__toolbar flex mb-2 items-center\">\n        <input\n          ref={titleRef}\n          className=\"xtitle\"\n          type=\"text\"\n          defaultValue={note?.title || INITIAL_TITLE}\n          onChange={writeNoteBuffered}\n        />\n        <span className=\"spacer\" />\n        <div className=\"text-faint\">\n          {note?.updated_at && (\n            <span>\n              Last update:{' '}\n              <LastSavedIndicator key={note?.id} dateStr={note?.updated_at} />\n            </span>\n          )}\n        </div>\n      </div>\n\n      <TextArea\n        minRows={8}\n        maxRows={16}\n        maxLength={2000}\n        ref={textRef}\n        className=\"xtextarea\"\n        defaultValue={note?.text || undefined}\n        onChange={writeNoteBuffered}\n      />\n\n      <div className=\"text-right text-faint-faint h-4 mt-1\">\n        {textValue ? `${textValue.length} / 2000` : ''}\n      </div>\n    </div>\n  )\n}\n\nconst Notes: FC = () => {\n  const currId = useCurrId()\n  const { data } = useAllNotesQuery()\n\n  useEffect(() => {\n    ReactTooltip.rebuild()\n  }, [currId])\n\n  return (\n    <div className=\"xcontainer\">\n      <Toolbar />\n\n      <Editor />\n\n      <div className=\"xitem-container\">\n        {data?.notes?.items.map((n: Note) => {\n          if (n.id === currId) return undefined\n          return (\n            <div key={n.id}>\n              <div\n                data-tip={`Open \"${n.title}\"`}\n                className=\"xitem mb-1\"\n                onClick={() => currIdVar(n.id)}\n              >\n                <div className=\"ellipsis\">{n.title}</div>\n                <div className=\"text-faint multi-ellipsis\">{n.text}</div>\n              </div>\n              <div className=\"text-right text-faint-faint\">\n                <LastSavedIndicator key={n.id} dateStr={n.updated_at} />\n              </div>\n            </div>\n          )\n        })}\n      </div>\n\n      <ReactTooltip effect=\"solid\" />\n    </div>\n  )\n}\n\nconst App: FC = () => {\n  const { data } = useAllNotesQuery()\n\n  // Load last note to edit\n  const lastId = data?.notes?.items[0]?.id\n  useEffect(() => {\n    // Need to set variable outside of the rendering context\n    // https://github.com/apollographql/apollo-client/issues/6188#issuecomment-796382651\n    currIdVar(lastId)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return <Notes />\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { ApolloProvider } from '@apollo/client'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { client } from './data/client'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}